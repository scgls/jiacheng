using BILWeb.OutBarCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using BILBasic.Common;
using System.Threading;
using System.Drawing;
using ThoughtWorks.QRCode.Codec;
using System.IO;

namespace BILWeb.Print
{
    public class Print_CodeLpk : Print_DB,IDisposable
    {

        string Err = "";
        Socket c = null;

        public Print_CodeLpk()
        {
            //cloth = FromBase64String(clothimg);
            //mask = FromBase64String(maskimg);
            //glasses = FromBase64String(glassesimg);
            //glove = FromBase64String(gloveimg);
        }
        //Image cloth,mask,glasses,glove;
        
        //static string clothimg = "";
        //static string maskimg = "";
        //static string glassesimg = "";
        //static string gloveimg ="";

        #region 新坐标
        ////1
        //int a1 = 80;
        //int a2 = 110;
        //int a3 = 173;
        ////2
        //int b1 = 175;
        //int b2 = 205;
        //int b3 = 238;
        ////3
        //int c1 = 240;
        //int c2 = 270;
        //int c3 = 303;
        ////4
        //int d1 = 305;
        //int d2 = 335;
        //int d3 = 368;
        ////5
        //int e1 = 370;
        //int e2 = 400;
        //int e3 = 433;
        ////6
        //int ff1 = 435;
        //int ff2 = 465;
        //int ff3 = 498;
        ////7
        //int g1 = 500;
        //int g2 = 530;
        //int g3 = 563;
        ////箱
        //int h1 = 575;
        //int h2 = 605;
        ////总第
        //int i1 = 650;
        //int i2 = 680;
        ////二维码
        //int j1 = 575;

        #endregion
        
        #region 老坐标
        //1
        int a1 = 40;
        int a2 = 70;
        int a3 = 123;
        //2
        int b1 = 125;
        int b2 = 155;
        int b3 = 188;
        //3
        int c1 = 190;
        int c2 = 220;
        int c3 = 253;
        //4
        int d1 = 255;
        int d2 = 285;
        int d3 = 318;
        //5
        int e1 = 320;
        int e2 = 350;
        int e3 = 383;
        //6
        int ff1 = 385;
        int ff2 = 415;
        int ff3 = 448;
        //7
        int g1 = 450;
        int g2 = 480;
        int g3 = 513;
        //箱
        int h1 = 525;
        int h2 = 555;
        //总第
        int i1 = 600;
        int i2 = 630;
        //二维码
        int j1 = 525;

        #endregion 
        public static Image FromBase64String(string base64Str)
        {
            Bitmap bitmap = null;
            Image img = null;
            using (MemoryStream ms = new MemoryStream())
            {
                byte[] buffer = Convert.FromBase64String(base64Str);
                ms.Write(buffer, 0, buffer.Length);
                try
                {
                    img = Image.FromStream(ms);
                    if (img != null)
                    {
                        bitmap = new Bitmap(img.Width, img.Height);
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.DrawImage(img, new Rectangle(0, 0, bitmap.Width, bitmap.Height));
                        }
                    }
                }
                catch { }
            }
            return bitmap;
        }



        public  bool isConnect(string ipaddress)
        {
            bool isconnected = false;
            try
            {
                IPAddress ip = IPAddress.Parse(ipaddress);
                //把ip和端口转化为IPEndPoint实例
                IPEndPoint ip_endpoint = new IPEndPoint(ip, 9100);
                //创建一个Socket
                c = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);             
                IAsyncResult connResult = c.BeginConnect(ip_endpoint, null, null);
                connResult.AsyncWaitHandle.WaitOne(2000, true);  //等待2秒
                isconnected=connResult.IsCompleted;
            }
            catch (Exception  ex)
            {
                return false;
            }
            finally
            {
                c.Close();
            }
            return isconnected;
        }


        public bool Connect(string ipaddress,ref string Err)
        {
            try
            {
                IPAddress ip = IPAddress.Parse(ipaddress);
                //把ip和端口转化为IPEndPoint实例
                IPEndPoint ip_endpoint = new IPEndPoint(ip, 9100);

                //创建一个Socket
                c = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                c.SendTimeout = 10000;
                //连接到服务器
                c.Connect(ip_endpoint);
                //应对同步Connect超时过长的办法，猜测应该是先用异步方式建立以个连接然后，
                //确认连接是否可用，然后报错或者关闭后，重新建立一个同步连接                    
                return true;
            }
            catch (ArgumentNullException e1)
            {
                Err = "Socket参数设置错误!" + e1.Message;
                return false;
            }
            catch (SocketException e2)
            {
                Err = "连接不到指定IP的打印机!" + e2.Message;
                return false;
            }
        }
        public void Close()
        {
            //if(c.Connected)
                c.Close();
        }
        public  int PrinterWake()
        {
            byte[] aCmdBuf = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

            ipWrite(aCmdBuf, 0, aCmdBuf.Length);

            //Thread.Sleep(300);

            return 0;

        }
        private  void ipWrite(Byte[] byte_send, int start, int length)
        {
            try
            {
                //发送测试信息
                c.Send(byte_send, length, 0);
            }
            catch (SocketException e2)
            {
                throw new Exception(e2.Message);
            }
        }
        private  void ipWrite(String str_send)
        {
            Byte[] byte_send = Encoding.GetEncoding("gb18030").GetBytes(str_send);
            ipWrite(byte_send, 0, byte_send.Length);
        }
        public static Image GetQRImg(string barcode)
        {
            QRCodeEncoder encoder = new QRCodeEncoder();
            encoder.QRCodeEncodeMode = QRCodeEncoder.ENCODE_MODE.BYTE;//编码方式(注意：BYTE能支持中文，ALPHA_NUMERIC扫描出来的都是数字)
            encoder.QRCodeScale = 4;//大小(值越大生成的二维码图片像素越高)
            encoder.QRCodeVersion = 0;//版本(注意：设置为0主要是防止编码的字符串太长时发生错误)
            encoder.QRCodeErrorCorrect = QRCodeEncoder.ERROR_CORRECTION.M;//错误效验、错误更正(有4个等级)
            String qrdata = barcode;
            System.Drawing.Bitmap bp = encoder.Encode(qrdata.ToString(), Encoding.Default);
            return bp;
        }
        public void PrintPicture2(Bitmap bmp)
        {

            int escType = 1;
            byte[] data = new byte[] { 0x1B, 0x33, 0x00 };
            ipWrite(data, 0, data.Length);
            data[0] = (byte)'\x00';
            data[1] = (byte)'\x00';
            data[2] = (byte)'\x00';    // Clear to Zero.

            Color pixelColor;

            // ESC * m nL nH
            byte[] escBmp = new byte[] { 0x1B, 0x2A, 0x00, 0x00, 0x00 };


            escBmp[2] = (byte)'\x21';
            escType = 3;
            //ipWrite("\n1.原始大小!\n");

            if (escType == 1)
            {
                //nL, nH
                escBmp[3] = (byte)(bmp.Width % 256);
                escBmp[4] = (byte)(bmp.Width / 256);

                // data
                for (int i = 0; i < ((bmp.Height + 7) / 8); i++)
                {
                    ipWrite(escBmp, 0, escBmp.Length);

                    for (int j = 0; j < bmp.Width; j++)
                    {
                        for (int k = 0; k < 8; k++)
                        {
                            if (((i * 8) + k) < bmp.Height)  // if within the BMP size
                            {
                                pixelColor = bmp.GetPixel(j, (i * 8) + k);
                                if (pixelColor.R == 0)
                                {
                                    data[0] += (byte)(128 >> k);
                                }
                            }
                        }

                        ipWrite(data, 0, 1);
                        data[0] = (byte)'\x00'; // Clear to Zero.
                    }

                    ipWrite("\n");
                } // data
            }
            else if (escType == 3)
            {
                //nL, nH
                escBmp[3] = (byte)(bmp.Width % 256);
                escBmp[4] = (byte)(bmp.Width / 256);


                // data
                for (int i = 0; i < (bmp.Height / 24) + 1; i++)
                {
                    ipWrite(escBmp, 0, escBmp.Length);

                    for (int j = 0; j < bmp.Width; j++)
                    {
                        for (int k = 0; k < 24; k++)
                        {
                            if (((i * 24) + k) < bmp.Height)   // if within the BMP size
                            {
                                pixelColor = bmp.GetPixel(j, (i * 24) + k);
                                if (pixelColor.R == 0)
                                {
                                    data[k / 8] += (byte)(128 >> (k % 8));
                                }
                            }
                        }

                        ipWrite(data, 0, 3);
                        data[0] = (byte)'\x00';
                        data[1] = (byte)'\x00';
                        data[2] = (byte)'\x00';    // Clear to Zero.
                    }

                    ipWrite("\n");
                } // data
            }
        }

        private void PreparePen(out Bitmap bmp, out Graphics g, out Font f1, out Font f2, out Font f3, out Font f4, out Brush brush, out Pen pen, out StringFormat sf)
        {
            PrinterWake();
            ipWrite("\x1b\x40"); //初始化打印机参数
            bmp = new Bitmap(610, 730);
            g = Graphics.FromImage(bmp);
            f1 = new Font("黑体", 20, FontStyle.Bold);
            f2 = new Font("黑体", 20, FontStyle.Bold);
            f3 = new Font("黑体", 25, FontStyle.Bold);
            f4 = new Font("黑体", 18, FontStyle.Bold);
            brush = new SolidBrush(Color.Black);
            pen = new Pen(Color.Black, 3);
            g.FillRectangle(Brushes.White, 0, 0, 610, 730);
            sf = new StringFormat();
            sf.Alignment = StringAlignment.Near;
            sf.LineAlignment = StringAlignment.Center;
        }

        private void PreparePen2(out Bitmap bmp, out Graphics g, out Font f1, out Font f2, out Font f3, out Font f4, out Brush brush, out Pen pen, out StringFormat sf)
        {
            PrinterWake();
            ipWrite("\x1b\x40"); //初始化打印机参数
            //bmp = new Bitmap(550, 315);
            bmp = new Bitmap(610, 315);
            g = Graphics.FromImage(bmp);
            f1 = new Font("黑体", 16, FontStyle.Bold);
            f2 = new Font("黑体", 15, FontStyle.Bold);
            f3 = new Font("黑体", 29, FontStyle.Bold);
            f4 = new Font("黑体", 19, FontStyle.Bold);
            brush = new SolidBrush(Color.Black);
            pen = new Pen(Color.Black, 3);
            //g.FillRectangle(Brushes.White, 0, 0, 550, 315);
            g.FillRectangle(Brushes.White, 0, 0, 610, 315);
            sf = new StringFormat();
            sf.Alignment = StringAlignment.Near;
            sf.LineAlignment = StringAlignment.Center;
        }

      

        Bitmap bmp;
        Graphics g;
        Font f1;
        Font f2;
        Font f3;
        Font f4;
        Brush brush;
        Pen pen;
        StringFormat sf;

        //取样标签
        public  void QuYang(Barcode_Model model)
        {
            PreparePen2(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);

            g.DrawString(产品编号, f1, brush, 50, 2);
            g.DrawString(model.MaterialNo, f2, brush, 50, 20);

            g.DrawString(取样人, f1, brush, 50, 50);
            g.DrawString(model.Creater, f2, brush, 50, 70);

            g.DrawString(取样数量, f1, brush, 50, 100);
            g.DrawString(model.Qty + "", f2, brush, 50, 120);

            g.DrawString(取样日期, f1, brush, 50, 150);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 50, 170);

            g.DrawString("取样批次", f1, brush, 50, 200);
            g.DrawString(model.BatchNo, new Font("宋体", 15, FontStyle.Bold), brush, 50, 220);

            g.DrawImage(GetQRImg(model.BarCode), new Point(375, 50));
            int i = model.BarCode.Split('@').Length-1;
            g.DrawString(model.BarCode.Split('@')[i], f2, brush, 355, 195);

            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        public void QuYang2(Barcode_Model model)
        {
            PreparePen2(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);

            g.DrawString(产品编号, f1, brush, 50, 2);
            g.DrawString(model.MaterialNo, f2, brush, 50, 20);

            g.DrawString(取样人, f1, brush, 50, 50);
            g.DrawString(model.Creater, f2, brush, 50, 70);

            g.DrawString(取样数量, f1, brush, 50, 100);
            g.DrawString(model.Qty + "", f2, brush, 50, 120);

            g.DrawString(取样日期, f1, brush, 50, 150);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 50, 170);

            g.DrawString("取样批次", f1, brush, 50, 200);
            g.DrawString(model.BatchNo, new Font("宋体", 15, FontStyle.Bold), brush, 50, 220);


            //g.DrawImage(GetQRImg(model.BarCode), new Point(375, 50));
            //int i = model.BarCode.Split('@').Length - 1;
            //g.DrawString(model.BarCode.Split('@')[i], f2, brush, 355, 195);

            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }


        //包材外
        public new void OutBaoCai(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);
            string path = System.Environment.CurrentDirectory;

            //Image cloth = Image.FromFile(@"D:\1项目微软\Tools\Tool\Tool\bin\Debug\11.png");
            //g.DrawImage(cloth, 314, 0, 74, 74);
            //Image glove = Image.FromFile(@"D:\1项目微软\Tools\Tool\Tool\bin\Debug\2.jpg");
            //g.DrawImage(glove, 383, 0, 74, 75);
            //Image mask = Image.FromFile(@"D:\1项目微软\Tools\Tool\Tool\bin\Debug\3.jpg");
            //g.DrawImage(mask, 458, 0, 74, 74);
            //Image glasses = Image.FromFile(@"D:\1项目微软\Tools\Tool\Tool\bin\Debug\4.jpg");
            //g.DrawImage(glasses, 529, 0, 74, 76);


            g.DrawString(包材外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, a1 - 2), new Point(308, ff3));
            g.DrawLine(pen, new Point(0, a1-2), new Point(610, a1-2));

            g.DrawString(产品编号, f1, brush, 10, a1);
            g.DrawString(model.MaterialNo, f2, brush, 10, a2);

            g.DrawString(产品名称, f1, brush, 310, a1);
            Rectangle r = new Rectangle(310, a2-1, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, a3), new Point(610, a3));

            g.DrawString(订单号, f1, brush, 10, b1);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, b2);
            g.DrawString(供应商, f1, brush, 310, b1);
            g.DrawString(model.SupCode, f2, brush, 310, b2);

            g.DrawLine(pen, new Point(0, b3), new Point(610, b3));

            g.DrawString(供应商批号, f1, brush, 10, c1);
            g.DrawString(model.SupPrdBatch, f2, brush, 10, c2);
            g.DrawString(生产日期, f1, brush, 310, c1);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, c2);
            
            g.DrawLine(pen, new Point(0, c3), new Point(610, c3));
            //new Font("黑体", 20, FontStyle.Bold);
            g.DrawString(厂内批号, f1, brush, 10, d1);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, d2);
            g.DrawString(到期日期, f1, brush, 310, d1);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, d2);

            g.DrawLine(pen, new Point(0, d3), new Point(610, d3));

            g.DrawString(存储条件, f1, brush, 10, e1);
            g.DrawString(model.StoreCondition, f2, brush, 10, e2);
            g.DrawString(接收日期, f1, brush, 310, e1);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, e2);

            g.DrawLine(pen, new Point(0, e3), new Point(610, e3));

            g.DrawString(接收人, f1, brush, 10, ff1);
            g.DrawString(model.Creater, f2, brush, 10, ff2);
            g.DrawString(数量, f1, brush, 310, ff1);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, ff2);

            g.DrawLine(pen, new Point(0, ff3), new Point(610, ff3));

            g.DrawString(装箱明细, f1, brush, 10, g1);
            g.DrawString(model.BoxDetail, f2, brush, 10, g2);
            //g.DrawString("数量", f1, brush, 310, g1);
            //g.DrawString("数量1", f2, brush, 310, g2);

            //g.DrawLine(pen, new Point(0, g3), new Point(610, g3));

            g.DrawString(箱码, f1, brush, 10, h1);
            g.DrawString(model.SerialNo, f2, brush, 10, h2);

            g.DrawString(第几箱总箱数, f1, brush, 10, i1);
            g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, i2);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, j1));

           



            PrintPicture2(bmp);
           
            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }


        //包材托
        public  void TOutBaoCai(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(包材托 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, a1 - 2), new Point(308, ff3));
            g.DrawLine(pen, new Point(0, a1 - 2), new Point(610, a1 - 2));

            g.DrawString(产品编号, f1, brush, 10, a1);
            g.DrawString(model.MaterialNo, f2, brush, 10, a2);
            g.DrawString(产品名称, f1, brush, 310, a1);
            Rectangle r = new Rectangle(310, a2-1, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, a3), new Point(610, a3));

            g.DrawString(订单号, f1, brush, 10, b1);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, b2);
            g.DrawString(供应商, f1, brush, 310, b1);
            g.DrawString(model.SupCode, f2, brush, 310, b2);

            g.DrawLine(pen, new Point(0, b3), new Point(610, b3));

            g.DrawString(供应商批号, f1, brush, 10, c1);
            g.DrawString(model.SupPrdBatch, f2, brush, 10, c2);
            g.DrawString(生产日期, f1, brush, 310, c1);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, c2);

            g.DrawLine(pen, new Point(0, c3), new Point(610, c3));

            g.DrawString(厂内批号, f1, brush, 10, d1);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, d2);
            g.DrawString(到期日期, f1, brush, 310, d1);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, d2);

            g.DrawLine(pen, new Point(0, d3), new Point(610, d3));

            g.DrawString(存储条件, f1, brush, 10, e1);
            g.DrawString(model.StoreCondition, f2, brush, 10, e2);
            g.DrawString(接收日期, f1, brush, 310, e1);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, e2);

            g.DrawLine(pen, new Point(0, e3), new Point(610, e3));

            g.DrawString(接收人, f1, brush, 10, ff1);
            g.DrawString(model.Creater, f2, brush, 10, ff2);
            g.DrawString(数量, f1, brush, 310, ff1);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, ff2);

            g.DrawLine(pen, new Point(0, ff3), new Point(610, ff3));

            g.DrawString(托盘明细, f1, brush, 10, g1);
            g.DrawString(model.PalletDetail, f2, brush, 10, g2);
            //g.DrawString("数量", f1, brush, 310, g1);
            //g.DrawString("数量1", f2, brush, 310, g2);

            //g.DrawLine(pen, new Point(0, g3), new Point(610, g3));

            g.DrawString(托盘号, f1, brush, 10, h1);
            g.DrawString(model.PalletNo, f2, brush, 10, h2);

            g.DrawString(总箱数, f1, brush, 10, i1);
            g.DrawString(model.BoxCount+"", f2, brush, 10, i2);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, j1));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }


        //原料外
        public new void OutR(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(原料外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 513));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(供应商, f1, brush, 310, 40);
            g.DrawString(model.SupCode, f2, brush, 310, 70);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(订单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(供应商批号, f1, brush, 310, 125);
            g.DrawString(model.SupPrdBatch, f2, brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(厂内批号, f1, brush, 10, 190);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(存储条件, f1, brush, 10, 255);
            g.DrawString(model.StoreCondition, f2, brush, 10, 285);
            g.DrawString(到期日期, f1, brush, 310, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(防护措施, f1, brush, 10, 320);
            g.DrawString(model.ProtectWay, f2, brush, 10, 350);

            

            g.DrawString(接收日期, f1, brush, 310, 320);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(特殊要求, f1, brush, 10, 385);
            g.DrawString(model.SpecialRequire, f2, brush, 10, 415);
            g.DrawString(净重, f1, brush, 310, 385);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            g.DrawString(接收人, f1, brush, 10, 450);
            g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(皮重, f1, brush, 310, 450);
            //g.DrawString(model.BoxWeight, f2, brush, 310, 480);

            g.DrawLine(pen, new Point(0, 513), new Point(610, 513));



            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //原料托
        public  void TOutR(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(原料托 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 513));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(供应商, f1, brush, 310, 40);
            g.DrawString(model.SupCode, f2, brush, 310, 70);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(订单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(供应商批号, f1, brush, 310, 125);
            g.DrawString(model.SupPrdBatch, f2, brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(厂内批号, f1, brush, 10, 190);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(存储条件, f1, brush, 10, 255);
            g.DrawString(model.StoreCondition, f2, brush, 10, 285);
            g.DrawString(到期日期, f1, brush, 310, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(防护措施, f1, brush, 10, 320);
            g.DrawString(model.ProtectWay, f2, brush, 10, 350);
            g.DrawString(接收日期, f1, brush, 310, 320);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(特殊要求, f1, brush, 10, 385);
            g.DrawString(model.SpecialRequire, f2, brush, 10, 415);
            g.DrawString(净重, f1, brush, 310, 385);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            g.DrawString(接收人, f1, brush, 10, 450);
            g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(皮重, f1, brush, 310, 450);
            //g.DrawString(model.BoxWeight, f2, brush, 310, 480);

            g.DrawLine(pen, new Point(0, 513), new Point(610, 513));



            g.DrawString(托盘号, f1, brush, 10, 525);
            g.DrawString(model.PalletNo, f2, brush, 10, 555);

            g.DrawString(总箱数, f1, brush, 10, 600);
            g.DrawString(model.BoxCount + "", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //无参照
        public new void NullRef(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(杂入外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 448));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(操作人, f1, brush, 10, 125);
            g.DrawString(model.Creater, f2, brush, 10, 155);
            g.DrawString(供应商批号, f1, brush, 310, 125);
            g.DrawString(model.SupPrdBatch, f2, brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(厂内批号, f1, brush, 10, 190);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(存储条件, f1, brush, 10, 255);
            g.DrawString(model.StoreCondition, f2, brush, 10, 285);
            g.DrawString(到期日期, f1, brush, 310, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(防护措施, f1, brush, 10, 320);
            g.DrawString(model.ProtectWay, f2, brush, 10, 350);
            g.DrawString(接收日期, f1, brush, 310, 320);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(特殊要求, f1, brush, 10, 385);
            g.DrawString(model.SpecialRequire, f2, brush, 10, 415);
            g.DrawString(数量, f1, brush, 310, 385);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(装箱明细, f1, brush, 10, 450);
            //g.DrawString(model.BoxDetail, f2, brush, 10, 480);
            //g.DrawString("数量", f1, brush, 310, 450);
            //g.DrawString("数量1", f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            //g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            //g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //无参照托
        public new void TNullRef(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(杂入托 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 448));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(操作人, f1, brush, 10, 125);
            g.DrawString(model.Creater, f2, brush, 10, 155);
            g.DrawString(供应商批号, f1, brush, 310, 125);
            g.DrawString(model.SupPrdBatch, f2, brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(厂内批号, f1, brush, 10, 190);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(存储条件, f1, brush, 10, 255);
            g.DrawString(model.StoreCondition, f2, brush, 10, 285);
            g.DrawString(到期日期, f1, brush, 310, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(防护措施, f1, brush, 10, 320);
            g.DrawString(model.ProtectWay, f2, brush, 10, 350);
            g.DrawString(接收日期, f1, brush, 310, 320);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(特殊要求, f1, brush, 10, 385);
            g.DrawString(model.SpecialRequire, f2, brush, 10, 415);
            g.DrawString(数量, f1, brush, 310, 385);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(装箱明细, f1, brush, 10, 450);
            //g.DrawString(model.BoxDetail, f2, brush, 10, 480);
            //g.DrawString("数量", f1, brush, 310, 450);
            //g.DrawString("数量1", f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(托盘号, f1, brush, 10, 525);
            g.DrawString(model.PalletNo, f2, brush, 10, 555);

            g.DrawString(总箱数, f1, brush, 10, 600);
            g.DrawString(model.BoxCount + "", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }
 

        //外来散装外
        public new void OutFromSanZhuang(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(外散装外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 513));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(订单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(供应商, f1, brush, 10, 190);
            g.DrawString(model.SupCode, f2, brush, 10, 220);
            g.DrawString(供应商批号, f1, brush, 310, 190);
            g.DrawString(model.SupPrdBatch, f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(相对比重, f1, brush, 10, 255);
            g.DrawString(model.RelaWeight, f2, brush, 10, 285);
            g.DrawString(生产日期, f1, brush, 310, 255);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(存储条件, f1, brush, 10, 320);
            g.DrawString(model.StoreCondition, f2, brush, 10, 350);
            g.DrawString(到期日期, f1, brush, 310, 320);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(防护措施, f1, brush, 10, 385);
            g.DrawString(model.ProtectWay, f2, brush, 10, 415);
            g.DrawString(接收日期, f1, brush, 310, 385);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            g.DrawString(接收人, f1, brush, 10, 450);
            g.DrawString(model.Creater, f2, brush, 10, 480);
            g.DrawString(净重, f1, brush, 310, 450);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }


        //外来半制外
        public new void OutFromBanZhi(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(外半制外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 513));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(订单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(供应商, f1, brush, 10, 190);
            g.DrawString(model.SupCode, f2, brush, 10, 220);
            g.DrawString(供应商批号, f1, brush, 310, 190);
            g.DrawString(model.SupPrdBatch, f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(混料日期, f1, brush, 10, 255);
            g.DrawString(model.MixDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            g.DrawString(生产日期, f1, brush, 310, 255);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(存储条件, f1, brush, 10, 320);
            g.DrawString(model.StoreCondition, f2, brush, 10, 350);
            g.DrawString(到期日期, f1, brush, 310, 320);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(料体批次, f1, brush, 10, 385);
            g.DrawString(model.MateBatch, f2, brush, 10, 415);
            g.DrawString(接收日期, f1, brush, 310, 385);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            g.DrawString(接收人, f1, brush, 10, 450);
            g.DrawString(model.Creater, f2, brush, 10, 480);
            g.DrawString(数量, f1, brush, 310, 450);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //半制外
        public new void OutBanZhi(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(半制外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 383));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(生产日期, f1, brush, 10, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 10, 220);
            g.DrawString(到期日期, f1, brush, 310, 190);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(生产班组, f1, brush, 10, 255);
            g.DrawString(model.ProductClass, f2, brush, 10, 285);
            g.DrawString(成品批号, f1, brush, 310, 255);
            g.DrawString(model.ProductBatch, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(数量, f1, brush, 10, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 10, 350);
            g.DrawString(重量, f1, brush, 310, 320);
            g.DrawString(model.ItemQty.ToString(), f2, brush, 310, 350);

            //g.DrawString(到期日期, f1, brush, 310, 320);
            //g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            //g.DrawString(料体批次, f1, brush, 10, 385);
            //g.DrawString(model.MateBatch, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            g.DrawString(model.BarcodeNo + "/", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }



        //散装外
        public new void OutSanZhuang(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(散装外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 448));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(相对比重, f1, brush, 10, 190);
            g.DrawString(model.RelaWeight, f2, brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(到期日期, f1, brush, 10, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            g.DrawString(存储条件, f1, brush, 310, 255);
            g.DrawString(model.StoreCondition, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(防护措施, f1, brush, 10, 320);
            g.DrawString(model.ProtectWay, f2, brush, 10, 350);
            g.DrawString(净重, f1, brush, 310, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(操作人, f1, brush, 10, 385);
            g.DrawString(model.Creater, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(净重, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            g.DrawString(总件数, f1, brush, 10, 600);
            g.DrawString(model.BoxCount+"", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }


        //成品外
        public new void OutChengPin(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(成品外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 383));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            if (model.warehouseno == "1")
            {
                g.DrawString(订单号, f1, brush, 10, 125);
                g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            }
            else
            {
                g.DrawString(工单号, f1, brush, 10, 125);
                g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            }
           
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(生产班组, f1, brush, 10, 190);
            g.DrawString(model.ProductClass, f2, brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(到期日期, f1, brush, 10, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            g.DrawString(包装方式, f1, brush, 310, 255);
            g.DrawString(model.BoxWeight, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(数量, f1, brush, 10, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 10, 350);
            if (model.warehouseno == "1")
            {
                g.DrawString(重量, f1, brush, 310, 320);
                g.DrawString(model.ItemQty + "", f2, brush, 310, 350);
            }

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            //g.DrawString(料体批次, f1, brush, 10, 385);
            //g.DrawString(model.MateBatch, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            if (model.warehouseno == "3")
            {
                g.DrawString(总箱数, f1, brush, 10, 600);
                g.DrawString(model.BoxCount + "", f2, brush, 10, 630);
            }
            //g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            //g.DrawString(model.BarcodeNo + "/", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //成品托
        public new void TOutChengPin(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(成品托 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 383));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.ErpVoucherNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(生产班组, f1, brush, 10, 190);
            g.DrawString(model.ProductClass, f2, brush, 10, 220);
            g.DrawString(生产日期, f1, brush, 310, 190);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(到期日期, f1, brush, 10, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            g.DrawString(包装方式, f1, brush, 310, 255);
            g.DrawString(model.BoxWeight, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(数量, f1, brush, 10, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 10, 350);
            //g.DrawString(重量, f1, brush, 310, 320);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            //g.DrawString(料体批次, f1, brush, 10, 385);
            //g.DrawString(model.MateBatch, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(托盘号, f1, brush, 10, 525);
            g.DrawString(model.PalletNo, f2, brush, 10, 555);

            g.DrawString(总箱数, f1, brush, 10, 600);
            g.DrawString(model.BoxCount+"", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //包材退
        public new void OutBaoCaiTui(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(包材退外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 383));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.WorkNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(存储条件, f1, brush, 10, 190);
            g.DrawString(model.StoreCondition, f2, brush, 10, 220);
            g.DrawString(退料日期, f1, brush, 310, 190);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(退料单位, f1, brush, 10, 255);
            g.DrawString(model.Unit, f2, brush, 10, 285);
            g.DrawString(到期日期, f1, brush, 310, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(退料人, f1, brush, 10, 320);
            g.DrawString(model.Creater, f2, brush, 10, 350);
            g.DrawString(数量, f1, brush, 310, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(装箱明细, f1, brush, 10, 385);
            g.DrawString(model.BoxDetail, f2, brush, 10, 415);
            //g.DrawString(数量, f1, brush, 310, 385);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(装箱明细, f1, brush, 10, 450);
            //g.DrawString(model.BoxDetail, f2, brush, 10, 480);
            //g.DrawString("数量", f1, brush, 310, 450);
            //g.DrawString("数量1", f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            //g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            //g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //包材退托
        public  void TOutBaoCaiTui(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(包材退托 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 383));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.WorkNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(存储条件, f1, brush, 10, 190);
            g.DrawString(model.StoreCondition, f2, brush, 10, 220);
            g.DrawString(退料日期, f1, brush, 310, 190);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(退料单位, f1, brush, 10, 255);
            g.DrawString(model.Unit, f2, brush, 10, 285);
            g.DrawString(到期日期, f1, brush, 310, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(退料人, f1, brush, 10, 320);
            g.DrawString(model.Creater, f2, brush, 10, 350);
            g.DrawString(数量, f1, brush, 310, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(托盘明细, f1, brush, 10, 385);
            g.DrawString(model.PalletDetail, f2, brush, 10, 415);
            //g.DrawString(数量, f1, brush, 310, 385);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(装箱明细, f1, brush, 10, 450);
            //g.DrawString(model.BoxDetail, f2, brush, 10, 480);
            //g.DrawString("数量", f1, brush, 310, 450);
            //g.DrawString("数量1", f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(托盘号, f1, brush, 10, 525);
            g.DrawString(model.PalletNo, f2, brush, 10, 555);

            g.DrawString(总箱数, f1, brush, 10, 600);
            g.DrawString(model.BoxCount+"", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //散装退
        public new void OutSanZhuangTui(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(散装退外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 513));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.WorkNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(相对比重, f1, brush, 10, 190);
            g.DrawString(model.RelaWeight, f2, brush, 10, 220);
            g.DrawString(退料日期, f1, brush, 310, 190);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(到期日期, f1, brush, 10, 255);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            g.DrawString(存储条件, f1, brush, 310, 255);
            g.DrawString(model.StoreCondition, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(防护措施, f1, brush, 10, 320);
            g.DrawString(model.ProtectWay, f2, brush, 10, 350);
            g.DrawString(净重, f1, brush, 310, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(退料人, f1, brush, 10, 385);
            g.DrawString(model.Creater, f2, brush, 10, 415);
            g.DrawString(生产日期, f1, brush, 310, 385);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            g.DrawString(退料单位, f1, brush, 10, 450);
            g.DrawString(model.Unit, f2, brush, 10, 480);
            //g.DrawString(净重, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            //g.DrawString(总件数, f1, brush, 10, 600);
            //g.DrawString(model.BoxCount + "", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }


        //半制退
        public new void OutBanZhiTui(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(半制退外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 448));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.WorkNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(退料日期, f1, brush, 10, 190);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 10, 220);
            g.DrawString(到期日期, f1, brush, 310, 190);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(存储条件, f1, brush, 10, 255);
            g.DrawString(model.StoreCondition, f2, brush, 10, 285);
            g.DrawString(防护措施, f1, brush, 310, 255);
            g.DrawString(model.ProtectWay, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            g.DrawString(净重, f1, brush, 10, 320);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 10, 350);
            g.DrawString(退料人, f1, brush, 310, 320);
            g.DrawString(model.Creater, f2, brush, 310, 350);

            g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            g.DrawString(生产日期, f1, brush, 10, 385);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 10, 415);
            g.DrawString(退料单位, f1, brush, 310, 385);
            g.DrawString(model.Unit, f2, brush, 310, 415);

            g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            //g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            //g.DrawString(model.BarcodeNo + "/", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }
   

        //成品退
        public new void OutChengPinTui(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(成品退外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 253));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(厂内批号, f1, brush, 10, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, 155);
            g.DrawString(生产日期, f1, brush, 310, 125);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(到期日期, f1, brush, 10, 190);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 220);
            g.DrawString(数量, f1, brush, 310, 190);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            //g.DrawString(到期日期, f1, brush, 10, 255);
            //g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            //g.DrawString(包装方式, f1, brush, 310, 255);
            //g.DrawString(model.BoxWeight, f2, brush, 310, 285);

            //g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            //g.DrawString(数量, f1, brush, 10, 320);
            //g.DrawString(model.ItemQty + "", f2, brush, 10, 350);
            //g.DrawString(重量, f1, brush, 310, 320);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            //g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            //g.DrawString(料体批次, f1, brush, 10, 385);
            //g.DrawString(model.MateBatch, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

        //成品退托
        public void TOutChengPinTui(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(成品退托 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 253));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(厂内批号, f1, brush, 10, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 10, 155);
            g.DrawString(生产日期, f1, brush, 310, 125);
            g.DrawString(model.ProductDate == DateTime.MinValue ? "" : model.ProductDate.ToString("yyyy-MM-dd"), f2, brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(到期日期, f1, brush, 10, 190);
            g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 220);
            g.DrawString(数量, f1, brush, 310, 190);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            //g.DrawString(到期日期, f1, brush, 10, 255);
            //g.DrawString(model.EDate.ToString("yyyy-MM-dd"), f2, brush, 10, 285);
            //g.DrawString(包装方式, f1, brush, 310, 255);
            //g.DrawString(model.BoxWeight, f2, brush, 310, 285);

            //g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            //g.DrawString(数量, f1, brush, 10, 320);
            //g.DrawString(model.ItemQty + "", f2, brush, 10, 350);
            //g.DrawString(重量, f1, brush, 310, 320);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            //g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            //g.DrawString(料体批次, f1, brush, 10, 385);
            //g.DrawString(model.MateBatch, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(托盘号, f1, brush, 10, 525);
            g.DrawString(model.PalletNo, f2, brush, 10, 555);

            g.DrawString(总箱数, f1, brush, 10, 600);
            g.DrawString(model.BoxCount+"", f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }

         //报废料
        public new void OutBaoFei(Barcode_Model model)
        {
            PreparePen(out bmp, out g, out f1, out f2, out f3, out f4, out brush, out pen, out sf);


            g.DrawString(报废料外 + model.areano, f3, brush, 5, 0);

            g.DrawLine(pen, new Point(308, 38), new Point(308, 318));
            g.DrawLine(pen, new Point(0, 38), new Point(610, 38));

            g.DrawString(产品编号, f1, brush, 10, 40);
            g.DrawString(model.MaterialNo, f2, brush, 10, 70);

            g.DrawString(产品名称, f1, brush, 310, 40);
            Rectangle r = new Rectangle(310, 71, 280, 55);
            g.DrawString(model.MaterialDesc, f4, brush, r, sf);

            g.DrawLine(pen, new Point(0, 123), new Point(610, 123));

            g.DrawString(工单号, f1, brush, 10, 125);
            g.DrawString(model.WorkNo, f2, brush, 10, 155);
            g.DrawString(厂内批号, f1, brush, 310, 125);
            g.DrawString(model.BatchNo, new Font("宋体", 20, FontStyle.Bold), brush, 310, 155);

            g.DrawLine(pen, new Point(0, 188), new Point(610, 188));

            g.DrawString(退料班组, f1, brush, 10, 190);
            g.DrawString(model.ProductClass, f2, brush, 10, 220);
            g.DrawString(退料日期, f1, brush, 310, 190);
            g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 220);

            g.DrawLine(pen, new Point(0, 253), new Point(610, 253));

            g.DrawString(退料人, f1, brush, 10, 255);
            g.DrawString(model.RecPeo, f2, brush, 10, 285);
            g.DrawString(数量, f1, brush, 310, 255);
            g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 285);

            g.DrawLine(pen, new Point(0, 318), new Point(610, 318));

            //g.DrawString(数量, f1, brush, 10, 320);
            //g.DrawString(model.ItemQty + "", f2, brush, 10, 350);
            //g.DrawString(重量, f1, brush, 310, 320);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 350);

            //g.DrawLine(pen, new Point(0, 383), new Point(610, 383));

            //g.DrawString(料体批次, f1, brush, 10, 385);
            //g.DrawString(model.MateBatch, f2, brush, 10, 415);
            //g.DrawString(接收日期, f1, brush, 310, 385);
            //g.DrawString(model.CreateTime.ToString("yyyy-MM-dd"), f2, brush, 310, 415);

            //g.DrawLine(pen, new Point(0, 448), new Point(610, 448));

            //g.DrawString(接收人, f1, brush, 10, 450);
            //g.DrawString(model.Creater, f2, brush, 10, 480);
            //g.DrawString(数量, f1, brush, 310, 450);
            //g.DrawString(model.Qty.ToString() + model.Unit, f2, brush, 310, 480);

            //g.DrawLine(pen, new Point(0, 513), new Point(610, 513));

            g.DrawString(箱码, f1, brush, 10, 525);
            g.DrawString(model.SerialNo, f2, brush, 10, 555);

            //g.DrawString(第几箱总箱数, f1, brush, 10, 600);
            //g.DrawString(model.BarcodeNo + "/" + model.PrintQty, f2, brush, 10, 630);

            g.DrawImage(GetQRImg(model.BarCode), new Point(390, 525));





            PrintPicture2(bmp);

            byte[] endprint = new byte[] { 0x0C }; //走纸
            ipWrite(endprint, 0, endprint.Length);
            bmp.Dispose();
            Thread.Sleep(500);
        }
        
        public void Dispose()
        {

        }
    }
}
