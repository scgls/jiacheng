@model BILWeb.Material.T_MaterialInfo
@{
    ViewBag.Title = "物料管理";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<link href="~/Content/css/bootstrap.min.css" rel="stylesheet" />
@using (Html.BeginForm("AddBySql", "material", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
    @Html.HiddenFor(model => model.ID)
    <div class="container">
        <table style="width:100%" class="table table-bordered table-striped ">
            <tbody>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.StrongHoldCode, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.StrongHoldCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StrongHoldCode, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.NetWeight, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.NetWeight, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NetWeight, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.StrongHoldName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.StrongHoldName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StrongHoldName, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.PackRule, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.PackRule, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PackRule, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.MaterialNo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.MaterialNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaterialNo, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.DisRule, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.DisRule, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DisRule, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.MaterialDesc, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.MaterialDesc, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaterialDesc, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.SupplierNo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.SupplierNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SupplierNo, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.SupplierName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.SupplierName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SupplierName, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Wide, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Wide, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Wide, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.Hight, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Hight, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Hight, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.UnitName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.UnitName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UnitName, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>
                @*<tr>
                    <th>
                        @Html.LabelFor(model => model.Volume, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Volume, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Volume, "", new { @class = "text-danger" })
                        </div>
                    </th>
                    <th>
                        @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                        </div>
                    </th>
                </tr>*@
            </tbody>

        </table>

    </div>

    <div class="form-group  col-md-10" style="padding-top:35px;">
        <div class="col-md-offset-1 col-md-10">
            <a href="javascript:history.go(-1);" class="btn btn-danger pull-left" style="margin-right:30px;">返回</a> 
        </div>
    </div>

    @*<div class="form-group  col-md-10" style="padding-top:35px;">
            <div class="col-md-offset-1 col-md-10">
                <input id="form1" type="submit" value="提 交" class="btn btn-primary pull-left" style="width:100px" />
            </div>
        </div>*@
</div>
    }
    @*@{Html.RenderPartial("~/Views/PartView/_PartialEditBack.cshtml");}*@
    <script src="~/Content/js/validate/jquery.validate.min.js"></script>
    <script src="~/Content/js/validate/jquery.validate.unobtrusive.min.js"></script>

